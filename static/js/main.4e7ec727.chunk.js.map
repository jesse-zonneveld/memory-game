{"version":3,"sources":["components/card.js","components/button.js","components/gameOver.js","components/overlay.js","components/game.js","components/header.js","components/instructions.js","components/scoreboard.js","App.js","reportWebVitals.js","index.js"],"names":["Card","e","this","props","checkSelectedCard","index","currentTarget","className","data-index","onClick","addToGameSeenDeck","bind","icon","Component","Button","onClickEvent","label","GameOver","resetGame","Overlay","active","Game","deck","state","seenDeck","sampleDeck","gameOver","overlay","icons","initializeDeck","shuffleDeck","forEach","i","push","cardIndex","card","includes","setTimeout","classList","remove","setState","add","addSeenCard","updateBestScore","resetScore","console","log","concat","incrementScore","atLeastOneUnseenCard","newSampleDeck","length","undefined","sort","Math","random","slice","find","map","Header","title","Instructions","Scoreboard","currentScore","bestScore","App","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e7ec727.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../scss/03-components/_card.scss\";\n\nclass Card extends Component {\n    addToGameSeenDeck(e) {\n        this.props.checkSelectedCard(this.props.index, e.currentTarget);\n    }\n\n    render() {\n        return (\n            <div\n                className=\"card\"\n                data-index={this.props.index}\n                onClick={this.addToGameSeenDeck.bind(this)}\n            >\n                <div className=\"card-icon\">\n                    <i className={this.props.icon}></i>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"../scss/03-components/_button.scss\";\n\nclass Button extends Component {\n    render() {\n        return (\n            <button className=\"btn\" onClick={this.props.onClickEvent}>\n                {this.props.label}\n            </button>\n        );\n    }\n}\n\nexport default Button;\n","import React from \"react\";\n\nimport \"../scss/03-components/_game-over.scss\";\nimport Button from \"./button\";\n\nconst GameOver = (props) => {\n    return (\n        <div className=\"game-over-container\">\n            <h2 className=\"game-over-title\">Game Over</h2>\n            <Button onClickEvent={props.resetGame} label={\"Play Again\"} />\n        </div>\n    );\n};\n\nexport default GameOver;\n","import React, { Component } from \"react\";\nimport \"../scss/03-components/_overlay.scss\";\n\nclass Overlay extends Component {\n    render() {\n        return (\n            <div\n                className={\n                    this.props.active ? \"overlay block-clicking\" : \"overlay\"\n                }\n            ></div>\n        );\n    }\n}\n\nexport default Overlay;\n","import React, { Component } from \"react\";\nimport \"../scss/03-components/_game.scss\";\nimport Card from \"./card\";\nimport GameOver from \"./gameOver\";\nimport Overlay from \"./overlay\";\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        this.deck = [];\n        this.state = {\n            seenDeck: [],\n            sampleDeck: [],\n            gameOver: false,\n            overlay: false,\n        };\n        this.icons = [\n            \"far fa-address-card\",\n            \"fas fa-air-freshener\",\n            \"fas fa-anchor\",\n            \"fas fa-arrows-alt\",\n            \"fas fa-atom\",\n            \"fas fa-baseball-ball\",\n            \"fas fa-beer\",\n            \"fas fa-bomb\",\n            \"fas fa-briefcase\",\n            \"fas fa-camera-retro\",\n            \"fas fa-car\",\n            \"fas fa-carrot\",\n            \"fas fa-chair\",\n            \"fas fa-cat\",\n            \"fas fa-cash-register\",\n            \"fas fa-chess-knight\",\n            \"fas fa-bowling-ball\",\n            \"fas fa-bread-slice\",\n            \"fas fa-building\",\n            \"fas fa-calculator\",\n            \"fas fa-bus-alt\",\n            \"fas fa-dumpster\",\n            \"fas fa-door-closed\",\n            \"fas fa-dice-five\",\n            \"fas fa-desktop\",\n            \"fas fa-concierge-bell\",\n            \"fas fa-cookie-bite\",\n            \"fas fa-cog\",\n            \"fas fa-coffee\",\n            \"fas fa-cloud-showers-heavy\",\n            \"fas fa-city\",\n            \"fas fa-clock\",\n            \"fas fa-child\",\n        ];\n        this.initializeDeck();\n    }\n\n    componentDidMount() {\n        this.shuffleDeck();\n    }\n\n    initializeDeck() {\n        this.icons.forEach((icon, i) => {\n            this.deck.push([i, icon]);\n        });\n    }\n\n    checkSelectedCard(cardIndex, card) {\n        if (this.state.seenDeck.includes(cardIndex)) {\n            setTimeout(() => {\n                this.gameOver();\n                card.classList.remove(\"red\");\n                this.setState({\n                    overlay: false,\n                });\n            }, 2000);\n            this.setState({\n                overlay: true,\n            });\n            card.classList.add(\"red\");\n        } else {\n            setTimeout(() => {\n                this.addSeenCard(cardIndex);\n                card.classList.remove(\"green\");\n                this.setState({\n                    overlay: false,\n                });\n            }, 2000);\n            this.setState({\n                overlay: true,\n            });\n            card.classList.add(\"green\");\n        }\n    }\n\n    gameOver() {\n        this.setState({\n            seenDeck: [],\n            gameOver: true,\n        });\n        this.props.updateBestScore();\n    }\n\n    resetGame() {\n        this.props.resetScore();\n        this.setState({\n            sampleDeck: [],\n            gameOver: false,\n        });\n        this.shuffleDeck();\n        console.log(this.state.seenDeck);\n    }\n\n    addSeenCard(cardIndex) {\n        this.setState({\n            seenDeck: this.state.seenDeck.concat(cardIndex),\n        });\n        this.shuffleDeck();\n        this.props.incrementScore();\n    }\n\n    shuffleDeck() {\n        let atLeastOneUnseenCard = false;\n        let newSampleDeck = [];\n        while (\n            !atLeastOneUnseenCard &&\n            !(this.state.seenDeck.length >= this.deck.length)\n        ) {\n            newSampleDeck = [...this.deck]\n                .sort(() => Math.random() - 0.5)\n                .slice(0, 12);\n            const test = newSampleDeck.find(\n                (card) => !this.state.seenDeck.includes(card[0])\n            );\n\n            atLeastOneUnseenCard = test === undefined ? false : true;\n        }\n        this.setState({\n            sampleDeck: newSampleDeck,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"game\">\n                <Overlay active={this.state.overlay} />\n                {this.state.gameOver ? (\n                    <GameOver resetGame={this.resetGame.bind(this)} />\n                ) : (\n                    <div className=\"cards\">\n                        {this.state.sampleDeck.map((card, i) => (\n                            <Card\n                                key={i}\n                                index={card[0]}\n                                icon={card[1]}\n                                checkSelectedCard={this.checkSelectedCard.bind(\n                                    this\n                                )}\n                            />\n                        ))}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from \"react\";\n\nimport \"../scss/03-components/_header.scss\";\n\nconst Header = (props) => {\n    return <h1 className=\"headline headline--large\">{props.title}</h1>;\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"../scss/03-components/_instructions.scss\";\n\nconst Instructions = () => {\n    return (\n        <div className=\"instructions-container\">\n            <h4 className=\"instructions-title\">\n                Try to press as many different symbols that you can.\n            </h4>\n            <ol className=\"instructions-list\">\n                <li className=\"instruction\">\n                    Press on any card to shuffle deck.\n                </li>\n                <li className=\"instruction\">\n                    Then press on a different card to repeat the process.\n                </li>\n                <li className=\"instruction\">\n                    You lose if you press on a card you've previously press on.\n                </li>\n            </ol>\n        </div>\n    );\n};\n\nexport default Instructions;\n","import React, { Component } from \"react\";\nimport \"../scss/03-components/_scoreboard.scss\";\n\nclass Scoreboard extends Component {\n    render() {\n        return (\n            <div className=\"scoreboard\">\n                <div className=\"current-score-container\">\n                    <div className=\"current-score-title\">\n                        Current Score: {this.props.currentScore}\n                    </div>\n                </div>\n                <div className=\"best-score-container\">\n                    <div className=\"best-score-title\">\n                        Best Score: {this.props.bestScore}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Scoreboard;\n","import React from \"react\";\n\nimport Game from \"./components/game\";\nimport Header from \"./components/header\";\nimport Instructions from \"./components/instructions\";\nimport Scoreboard from \"./components/scoreboard\";\nimport \"./scss/app.scss\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentScore: 0,\n            bestScore: 0,\n        };\n    }\n\n    resetScore() {\n        this.setState({\n            currentScore: 0,\n        });\n    }\n\n    incrementScore() {\n        this.setState({\n            currentScore: this.state.currentScore + 1,\n        });\n    }\n\n    updateBestScore() {\n        if (this.state.currentScore > this.state.bestScore) {\n            this.setState({\n                bestScore: this.state.currentScore,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app l-container-full-screen\">\n                <div className=\"l-container-1080\">\n                    <Header title={\"Memory Game\"} />\n                    <Instructions />\n                </div>\n                <div className=\"game-container\">\n                    <div className=\"l-container-full-screen bg-green\">\n                        <div className=\"l-container-1080\">\n                            <Scoreboard\n                                currentScore={this.state.currentScore}\n                                bestScore={this.state.bestScore}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"l-container-full-screen\">\n                        <div className=\"l-container-1080\">\n                            <Game\n                                resetScore={this.resetScore.bind(this)}\n                                incrementScore={this.incrementScore.bind(this)}\n                                updateBestScore={this.updateBestScore.bind(\n                                    this\n                                )}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}